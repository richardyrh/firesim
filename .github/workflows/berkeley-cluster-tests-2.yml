# ci tests that use a separate repository to run (can potentially share ci resources with other workflows)
name: berkeley-cluster-tests-2

on:
  # run ci when pring to main (note: ci runs on the merge commit of the pr!)
  pull_request:
    branches:
      - main
      - stable

defaults:
  run:
    shell: bash -leo pipefail {0}

env:
  # needed for local FPGA build bitstream (access GH repo to store bitstreams)
  PERSONAL_ACCESS_TOKEN: ${{ secrets.BARTENDER_PERSONAL_ACCESS_TOKEN }}

  # temporary directories should be located in /scratch (since it's larger)
  REMOTE_WORK_DIR: /scratch/buildbot/fs-shared/fs-${{ github.sha }}-${{ github.workflow }}

  # misc
  TERM: xterm-256-color

  # following env. vars need to be updated in fabric_cfg.py to propagate to child processes
  # only run VCS tests for scala tests
  TEST_DISABLE_VERILATOR: "true"
  TEST_DISABLE_VIVADO: "true"

jobs:
  cancel-prior-workflows:
    name: cancel-prior-workflows
    runs-on: ubuntu-22.04
    steps:
      - name: Cancel previous workflow runs
        if: ${{ contains(github.event.pull_request.labels.*.name, 'ci:persist-prior-workflows') != true }}
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

  start-workflow:
    name: start-workflow
    # unable to access env context in job.if thus have to put gh-a context expression directly here.
    # note that the check is using a boolean true instead of string 'true' since it's directly using
    # the expression not a variable like if checking against the env context string.
    if: ${{ contains(github.event.pull_request.labels.*.name, 'ci:disable') != true }}
    runs-on: ubuntu-22.04
    steps:
      - run: true

  # Set up a set of boolean conditions to control which branches of the CI
  # workflow will execute. This is based off the conditional job execution
  # example here: https://github.com/dorny/paths-filter#examples
  filter-jobs-on-changes:
    name: filter-jobs-on-changes
    runs-on: ubuntu-22.04
    needs: start-workflow
    # Queried by downstream jobs to determine if they should run.
    outputs:
      run-ci: ${{ steps.filter.outputs.all_count != steps.filter.outputs.non-ci-files_count }}
      both-conda-reqs-lock-modified: ${{
        ((steps.filter.outputs.conda-reqs == 'false') && (steps.filter.outputs.conda-lockfile == 'false')) ||
        ((steps.filter.outputs.conda-reqs == 'true') && (steps.filter.outputs.conda-lockfile == 'true')) }}
      run-cpp-lint: ${{ steps.filter.outputs.clang == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            all:
              - '**'

            docs: &docs-handle
              - 'docs/**'
              - '.readthedocs.yml'

            release: &release-handle
              - '.github/workflows/release-notes.yml'
              - '.github/workflows/config/release-notes.json'

            non-ci-files:
              - *docs-handle
              - *release-handle
              - '**/*.md'
              - '**/.gitignore'
              - '**/.gitattributes'
              - '.github/ISSUE_TEMPLATE/**'
              - '.github/dependabot.yml'
              - '.mergify.yml'

            clang:
              - '.clang-*'
              - '**/*.cc'
              - '**/*.h'

            conda-reqs:
                - 'conda-reqs/*.yaml'

            conda-lockfile:
                - 'conda-reqs/*.conda-lock.yml'

  setup-persistent-repo:
    name: setup-persistent-repo
    runs-on: local-fpga-2
    needs: filter-jobs-on-changes
    if: needs.filter-jobs-on-changes.outputs.run-ci == 'true'
    steps:
      # This forces a fresh clone of the repo during the `checkout` step
      # to resolve stale submodule URLs. See https://github.com/ucb-bar/chipyard/pull/1156.
      - name: Delete old checkout
        run: |
            ls -alh .
            rm -rf ${{ github.workspace }}/* || true
            rm -rf ${{ github.workspace }}/.* || true
            ls -alh .
      - uses: actions/checkout@v4
      - name: Setup repo copy
        run: |
          mkdir -p $(dirname ${{ env.REMOTE_WORK_DIR }})
          git clone ${{ github.workspace }} ${{ env.REMOTE_WORK_DIR }}
      - name: Setup repo (for xilinx_alveo_u250 platform)
        run: |
          cd ${{ env.REMOTE_WORK_DIR }}
          ./build-setup.sh --verbose
          source sourceme-manager.sh --skip-ssh-setup
          firesim managerinit --platform xilinx_alveo_u250

  start-scalatests:
    name: start-scalatests
    needs: [setup-persistent-repo]
    # unable to access env context in job.if thus have to put gh-a context expression directly here.
    # note that the check is using a boolean true instead of string 'true' since it's directly using
    # the expression not a variable like if checking against the env context string.
    if: ${{ contains(github.event.pull_request.labels.*.name, 'ci:disable-scala-tests') != true }}
    runs-on: local-fpga-shared # since this is a longer lived job, can run on either runner
    steps:
      - uses: actions/checkout@v4
      - name: Precompile scala sources needed for tests
        run: ./.github/scripts/invoke-make.py "FIRESIM_SBT_PROJECT=firesim SBT_COMMAND=test:compile sbt"

  run-firesimlib-scala-tests:
    name: run-firesimlib-scala-tests
    needs: [start-scalatests]
    runs-on: local-fpga-2
    steps:
      - uses: actions/checkout@v4
      - name: Run firesimlib scala tests
        run: ./.github/scripts/invoke-make.py "FIRESIM_SBT_PROJECT=firesimLib test"

  run-midas-scala-tests:
    name: run-midas-scala-tests
    needs: [start-scalatests]
    runs-on: local-fpga-2
    steps:
      - uses: actions/checkout@v4
      - name: Run midas and midas-targetutils scala tests
        run: ./.github/scripts/invoke-make.py "FIRESIM_SBT_PROJECT=midas test"

  run-midasexamples-scala-tests-groupA:
    name: run-midasexamples-scala-tests-groupA
    needs: [start-scalatests]
    runs-on: local-fpga-shared # since this is a longer lived job, can run on either runner
    steps:
      - uses: actions/checkout@v4
      - name: Run CIGroupA Scala tests
        run: ./.github/scripts/invoke-make.py "SCALA_TEST=firesim.midasexamples.CIGroupA testOnly"

  run-midasexamples-scala-tests-groupB:
    name: run-midasexamples-scala-tests-groupB
    needs: [start-scalatests]
    runs-on: local-fpga-shared # since this is a longer lived job, can run on either runner
    steps:
      - uses: actions/checkout@v4
      - name: Run CIGroupB Scala tests
        run: ./.github/scripts/invoke-make.py "SCALA_TEST=firesim.midasexamples.CIGroupB testOnly"

  cleanup-local-fpga-repo:
    name: cleanup-local-fpga-repo
    needs: [
      run-firesimlib-scala-tests,
      run-midas-scala-tests,
      run-midasexamples-scala-tests-groupA,
      run-midasexamples-scala-tests-groupB]
    # uses a separate runner to cleanup (irrespective, of other jobs cancelled, running, etc)
    runs-on: local-fpga-cleanup
    if: ${{ always() }}
    steps:
      - name: Delete repo copy
        run: rm -rf ${{ env.REMOTE_WORK_DIR }}
